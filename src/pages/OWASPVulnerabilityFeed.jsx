// File: src/pages/OWASPVulnerabilityFeed.jsx

import React, { useEffect, useState } from 'react';
import { db } from '../firebaseConfig';
import {
  collection,
  getDocs,
  deleteDoc,
  doc,
  addDoc
} from 'firebase/firestore';

const CVE_API = 'https://services.nvd.nist.gov/rest/json/cves/2.0?resultsPerPage=100';

const owaspKeywords = {
  A01: ['access control', 'unauthorized access', 'privilege escalation'],
  A02: ['cryptographic', 'encryption', 'data exposure'],
  A03: ['injection', 'sql', 'xss', 'command'],
  A04: ['insecure design'],
  A05: ['security misconfiguration', 'misconfigured'],
  A06: ['outdated', 'old version', 'vulnerable component'],
  A07: ['authentication failure', 'auth bypass'],
  A08: ['integrity failure', 'tampering'],
  A09: ['logging failure', 'monitoring failure'],
  A10: ['ssrf', 'server-side request forgery']
};

const categorizeByOWASP = (description) => {
  const text = description.toLowerCase();
  for (const [code, keywords] of Object.entries(owaspKeywords)) {
    if (keywords.some(word => text.includes(word))) {
      return code;
    }
  }
  return null;
};

const OWASPVulnerabilityFeed = () => {
  const [vulns, setVulns] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchData = async () => {
    try {
      const response = await fetch(CVE_API);
      const data = await response.json();

      const items = (data.vulnerabilities || []).map(entry => {
        const cve = entry.cve;
        const desc = cve.descriptions?.find(d => d.lang === 'en')?.value || '';
        const category = categorizeByOWASP(desc);
        if (!category) return null;

        return {
          id: cve.id,
          title: desc,
          published: cve.published || 'N/A',
          severity: cve.metrics?.cvssMetricV31?.[0]?.cvssData?.baseSeverity || 'Unknown',
          category,
          tech: cve.configurations?.[0]?.nodes?.[0]?.cpeMatch?.map(c => c.criteria) || ['Unknown']
        };
      }).filter(Boolean);

      const snapshot = await getDocs(collection(db, 'vulnerabilities'));
      snapshot.forEach(docu => deleteDoc(doc(db, 'vulnerabilities', docu.id)));

      for (const vuln of items) {
        await addDoc(collection(db, 'vulnerabilities'), vuln);
      }

      setVulns(items);
      setLoading(false);
    } catch (err) {
      console.error('Error fetching vulnerabilities:', err);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const today = new Date().toISOString().split('T')[0];
  const todayVulns = vulns.filter(v => v.published.includes(today));
  const trends = vulns.reduce((acc, v) => {
    acc[v.category] = (acc[v.category] || 0) + 1;
    return acc;
  }, {});

  const sortedTrends = Object.entries(trends).sort((a, b) => b[1] - a[1]);
  const uniqueTech = [...new Set(vulns.flatMap(v => v.tech))].slice(0, 6);

  return (
    <div className="vuln-container">
      <h1 className="heading">OWASP Real-time Vulnerability Feed</h1>
      {loading ? (
        <p className="loading">Loading vulnerabilities...</p>
      ) : (
        <>
          <section className="dashboard">
            <div className="card alert">
              <h3>Today's Critical Alerts</h3>
              <p>{todayVulns.length} CVEs Published Today</p>
            </div>
            <div className="card trending">
              <h3>Trending OWASP Categories</h3>
              <ul>
                {sortedTrends.slice(0, 3).map(([cat, count]) => (
                  <li key={cat}>{cat} - {count} reports</li>
                ))}
              </ul>
            </div>
            <div className="card severity">
              <h3>Severity Overview</h3>
              <ul>
                {vulns.slice(0, 5).map(v => (
                  <li key={v.id} className={`sev-${v.severity.toLowerCase()}`}>
                    {v.severity} - {v.title.slice(0, 60)}...
                  </li>
                ))}
              </ul>
            </div>
            <div className="card tech">
              <h3>Affected Technologies</h3>
              <ul>
                {uniqueTech.map(t => <li key={t}>{t}</li>)}
              </ul>
            </div>
          </section>

          <section className="feed">
            <h2>Vulnerability Feed</h2>
            <div className="grid">
              {vulns.map((v, i) => (
                <div className="vuln-card" key={i}>
                  <h4>{v.id}</h4>
                  <p className="desc">{v.title.slice(0, 150)}...</p>
                  <p><strong>Severity:</strong> {v.severity}</p>
                  <p><strong>Category:</strong> {v.category}</p>
                  <p><strong>Tech:</strong> {v.tech.join(', ')}</p>
                  <p><strong>Date:</strong> {v.published}</p>
                </div>
              ))}
            </div>
          </section>
        </>
      )}
    </div>
  );
};

export default OWASPVulnerabilityFeed;
