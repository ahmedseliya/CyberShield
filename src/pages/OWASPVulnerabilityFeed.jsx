import React, { useEffect, useState } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, orderBy, onSnapshot } from 'firebase/firestore';

// Helper to assign a color to each severity level
const getSeverityClass = (severity) => {
    switch (severity?.toLowerCase()) {
        case 'critical': return 'sev-critical';
        case 'high': return 'sev-high';
        case 'medium': return 'sev-medium';
        case 'low': return 'sev-low';
        default: return 'sev-unknown';
    }
};

const OWASPVulnerabilityFeed = () => {
    const [vulns, setVulns] = useState([]);
    const [loading, setLoading] = useState(true);
    // New state to track which vulnerability is expanded
    const [expandedVulnId, setExpandedVulnId] = useState(null); 

    useEffect(() => {
        // Set up a real-time listener to Firestore
        const vulnsCollection = collection(db, 'vulnerabilities');
        const q = query(vulnsCollection, orderBy('published', 'desc')); // Order by newest first

        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const vulnerabilitiesData = [];
            querySnapshot.forEach((doc) => {
                vulnerabilitiesData.push(doc.data());
            });
            setVulns(vulnerabilitiesData);
            setLoading(false);
        }, (error) => {
            console.error("Error fetching vulnerabilities in real-time:", error);
            setLoading(false);
        });

        // Clean up the listener when the component unmounts
        return () => unsubscribe();
    }, []); // The empty array ensures this effect runs only once to set up the listener

    // Function to handle click on vulnerability description
    const handleDescriptionClick = (id) => {
        // Toggle the expanded state for the clicked vulnerability
        setExpandedVulnId(expandedVulnId === id ? null : id);
    };

    // --- Dashboard Data Calculations ---
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const todayVulns = vulns.filter(v => new Date(v.published) >= today);
    const criticalAlerts = todayVulns.filter(v => ['CRITICAL', 'HIGH'].includes(v.severity));

    const trends = vulns.reduce((acc, v) => {
        const categoryName = v.category.split('-')[0]; // e.g., "A01:2021"
        acc[categoryName] = (acc[categoryName] || 0) + 1;
        return acc;
    }, {});
    const sortedTrends = Object.entries(trends).sort((a, b) => b[1] - a[1]).slice(0, 3);

    return (
        <div className="vuln-container">
            <h1 className="heading">CyberShield - Real-time Vulnerability Feed</h1>
            {loading ? (
                <div className="loading-container">
                    <div className="spinner"></div>
                    <p>Initializing live feed...</p>
                </div>
            ) : (
                <>
                    <section className="dashboard">
                        <div className="card alert">
                            <h3>Today's Critical Alerts</h3>
                            <p className="metric">{criticalAlerts.length}</p>
                            <span>High & Critical CVEs (Last 24h)</span>
                        </div>
                        <div className="card trending">
                            <h3>Trending OWASP Categories</h3>
                            <ul>
                                {sortedTrends.length > 0 ? sortedTrends.map(([cat, count]) => (
                                    <li key={cat}><strong>{cat}</strong> - {count} reports</li>
                                )) : <li>No trending data available.</li>}
                            </ul>
                        </div>
                        <div className="card severity">
                            <h3>Recent High-Severity Issues</h3>
                            <ul>
                                {vulns.filter(v => ['CRITICAL', 'HIGH'].includes(v.severity)).slice(0, 4).map(v => (
                                    <li key={v.id}>
                                        <span className={`badge ${getSeverityClass(v.severity)}`}>{v.severity}</span>
                                        <a href={v.link} target="_blank" rel="noopener noreferrer">{v.id}</a>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    </section>

                    <section className="feed">
                        <h2>Latest Vulnerabilities</h2>
                        <div className="grid">
                            {vulns.slice(0, 12).map((v) => (
                                <div className="vuln-card" key={v.id}>
                                    <div className="card-header">
                                        <a href={v.link} target="_blank" rel="noopener noreferrer" className="vuln-id">{v.id}</a>
                                        <span className={`badge ${getSeverityClass(v.severity)}`}>{v.severity} ({v.score})</span>
                                    </div>
                                    <p 
                                        className="desc clickable-desc" 
                                        onClick={() => handleDescriptionClick(v.id)}
                                    >
                                        {/* Conditional rendering for the description */}
                                        {v.title.length > 150 && expandedVulnId !== v.id
                                            ? `${v.title.slice(0, 150)}...`
                                            : v.title
                                        }
                                    </p>
                                    <p className="category"><strong>Category:</strong> {v.category}</p>
                                    <p className="date"><strong>Published:</strong> {new Date(v.published).toLocaleString()}</p>
                                </div>
                            ))}
                        </div>
                    </section>
                </>
            )}
        </div>
    );
};

export default OWASPVulnerabilityFeed;