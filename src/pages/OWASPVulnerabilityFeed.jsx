// File: src/components/OWASPVulnerabilityFeed.jsx

import React, { useEffect, useState } from 'react';
import { db } from '../firebaseConfig';
import { collection, addDoc, getDocs, deleteDoc, doc, query, orderBy, limit } from 'firebase/firestore';
import './OWASPVulnerabilityFeed.css';

const CVE_API = 'https://api.cveapi.com/cves'; // Replace with your preferred API endpoint
const REFRESH_INTERVAL = 1000 * 60 * 45; // 45 minutes

const owaspCategories = {
  A01: 'Broken Access Control',
  A02: 'Cryptographic Failures',
  A03: 'Injection',
  A04: 'Insecure Design',
  A05: 'Security Misconfiguration',
  A06: 'Vulnerable & Outdated Components',
  A07: 'Identification & Authentication Failures',
  A08: 'Software & Data Integrity Failures',
  A09: 'Security Logging & Monitoring Failures',
  A10: 'Server-Side Request Forgery'
};

const categorizeByOWASP = (description) => {
  const lower = description.toLowerCase();
  if (lower.includes('access')) return 'A01';
  if (lower.includes('crypto')) return 'A02';
  if (lower.includes('sql') || lower.includes('injection')) return 'A03';
  if (lower.includes('design')) return 'A04';
  if (lower.includes('config')) return 'A05';
  if (lower.includes('outdated') || lower.includes('version')) return 'A06';
  if (lower.includes('auth')) return 'A07';
  if (lower.includes('integrity')) return 'A08';
  if (lower.includes('log') || lower.includes('monitor')) return 'A09';
  if (lower.includes('ssrf') || lower.includes('request')) return 'A10';
  return 'Uncategorized';
};

const OWASPVulnerabilityFeed = () => {
  const [vulns, setVulns] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchData = async () => {
    try {
      const response = await fetch(CVE_API);
      const data = await response.json();
      const filtered = data.slice(0, 50).map(v => ({
        id: v.id || v.cve_id,
        title: v.summary,
        published: v.published || v.date,
        severity: v.cvss || 'Unknown',
        category: categorizeByOWASP(v.summary),
        tech: v.affected_software || 'Unknown'
      }));

      // Clear old data
      const snapshot = await getDocs(collection(db, 'vulnerabilities'));
      snapshot.forEach(docu => deleteDoc(doc(db, 'vulnerabilities', docu.id)));

      // Store new data
      for (const vuln of filtered) {
        await addDoc(collection(db, 'vulnerabilities'), vuln);
      }

      setVulns(filtered);
      setLoading(false);
    } catch (err) {
      console.error('Error fetching vulnerabilities:', err);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, REFRESH_INTERVAL);
    return () => clearInterval(interval);
  }, []);

  const today = new Date().toISOString().split('T')[0];
  const criticalToday = vulns.filter(v => v.published.includes(today));
  const trends = Object.entries(
    vulns.reduce((acc, v) => {
      acc[v.category] = (acc[v.category] || 0) + 1;
      return acc;
    }, {})
  ).sort((a, b) => b[1] - a[1]);

  return (
    <div className="vuln-feed">
      <h2 className="heading">OWASP Real-time Vulnerability Feed</h2>
      {loading ? (
        <p className="loading">Fetching data...</p>
      ) : (
        <>
          <section className="dashboard">
            <div className="card alert">
              <h3>Today's Critical Alerts</h3>
              <p>{criticalToday.length} New Vulnerabilities Today</p>
            </div>
            <div className="card trending">
              <h3>Trending Exploits</h3>
              <ul>
                {trends.slice(0, 3).map(([cat, count]) => (
                  <li key={cat}>{owaspCategories[cat] || cat} - {count} reports</li>
                ))}
              </ul>
            </div>
            <div className="card severity">
              <h3>Severity Overview</h3>
              <ul>
                {vulns.slice(0, 5).map(v => (
                  <li key={v.id}><strong>{v.severity}</strong> - {v.title.slice(0, 50)}...</li>
                ))}
              </ul>
            </div>
            <div className="card tech">
              <h3>Affected Technologies</h3>
              <ul>
                {[...new Set(vulns.map(v => v.tech).flat())].slice(0, 5).map(t => (
                  <li key={t}>{t}</li>
                ))}
              </ul>
            </div>
          </section>

          <section className="feed-table">
            <h3>Full Feed</h3>
            <table>
              <thead>
                <tr>
                  <th>CVE ID</th>
                  <th>Title</th>
                  <th>Published</th>
                  <th>Severity</th>
                  <th>OWASP Category</th>
                  <th>Affected Tech</th>
                </tr>
              </thead>
              <tbody>
                {vulns.map(v => (
                  <tr key={v.id}>
                    <td>{v.id}</td>
                    <td>{v.title}</td>
                    <td>{v.published}</td>
                    <td>{v.severity}</td>
                    <td>{owaspCategories[v.category] || v.category}</td>
                    <td>{v.tech}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </section>
        </>
      )}
    </div>
  );
};

export default OWASPVulnerabilityFeed;
