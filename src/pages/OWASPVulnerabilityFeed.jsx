// src/pages/OWASPVulnerabilityFeed.jsx

import React, { useEffect, useState } from 'react';
import { db } from '../firebaseConfig';
import {
  collection,
  getDocs,
  deleteDoc,
  doc,
  addDoc
} from 'firebase/firestore';

const CVE_API = 'https://services.nvd.nist.gov/rest/json/cves/2.0?resultsPerPage=10';

const OWASPVulnerabilityFeed = () => {
  const [vulns, setVulns] = useState([]);
  const [loading, setLoading] = useState(true);

  // OWASP keyword mapping
  const owaspCategories = {
    A01: ['broken access control', 'unauthorized access', 'privilege escalation'],
    A02: ['cryptographic failures', 'insecure encryption', 'data exposure'],
    A03: ['injection', 'sql injection', 'xss', 'command injection'],
    A04: ['insecure design', 'design flaw'],
    A05: ['security misconfiguration', 'misconfigured', 'improper config'],
    A06: ['vulnerable and outdated components', 'outdated software', 'old version'],
    A07: ['identification and authentication failures', 'auth bypass', 'broken authentication'],
    A08: ['software and data integrity failures', 'unsigned', 'tampering'],
    A09: ['security logging and monitoring failures', 'no logging', 'no monitoring'],
    A10: ['ssrf', 'server-side request forgery']
  };

  const categorizeByOWASP = (description) => {
    const lowerDesc = description.toLowerCase();
    for (const [category, keywords] of Object.entries(owaspCategories)) {
      if (keywords.some(keyword => lowerDesc.includes(keyword))) {
        return category;
      }
    }
    return 'Other';
  };

  const fetchData = async () => {
    try {
      const response = await fetch(CVE_API);
      const data = await response.json();

      const filtered = (data.vulnerabilities || []).map(v => {
        const cve = v.cve;
        const description = cve.descriptions?.find(d => d.lang === 'en')?.value || 'No description';
        const published = cve.published || 'N/A';
        const severity = cve.metrics?.cvssMetricV31?.[0]?.cvssData?.baseSeverity || 'Unknown';
        const affected = cve.configurations?.[0]?.nodes?.[0]?.cpeMatch?.map(c => c.criteria) || ['Unknown'];

        return {
          id: cve.id,
          title: description,
          published,
          severity,
          category: categorizeByOWASP(description),
          tech: affected
        };
      });

      // Clear old vulnerabilities from Firestore
      const snapshot = await getDocs(collection(db, 'vulnerabilities'));
      snapshot.forEach(docu => deleteDoc(doc(db, 'vulnerabilities', docu.id)));

      // Store new ones
      for (const vuln of filtered) {
        await addDoc(collection(db, 'vulnerabilities'), vuln);
      }

      setVulns(filtered);
      setLoading(false);
    } catch (err) {
      console.error('Error fetching vulnerabilities:', err);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  return (
    <div className="min-h-screen bg-[#0a192f] text-white p-6">
      <h1 className="text-3xl font-bold mb-6 text-center text-orange-400">
        OWASP Vulnerability Feed
      </h1>

      {loading ? (
        <p className="text-center text-lg">Loading vulnerabilities...</p>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {vulns.map((vuln, index) => (
            <div
              key={index}
              className="bg-[#112240] p-4 rounded-lg shadow-lg hover:shadow-orange-500/40 transition duration-300"
            >
              <h2 className="text-xl font-semibold text-orange-300">{vuln.id}</h2>
              <p className="mt-2 text-sm">{vuln.title}</p>
              <p className="mt-2">
                <span className="font-semibold">Published:</span> {vuln.published}
              </p>
              <p>
                <span className="font-semibold">Severity:</span>{' '}
                <span
                  className={`font-bold ${
                    vuln.severity === 'Critical'
                      ? 'text-red-500'
                      : vuln.severity === 'High'
                      ? 'text-orange-400'
                      : vuln.severity === 'Medium'
                      ? 'text-yellow-300'
                      : 'text-green-300'
                  }`}
                >
                  {vuln.severity}
                </span>
              </p>
              <p>
                <span className="font-semibold">OWASP Category:</span> {vuln.category}
              </p>
              <p className="mt-2 text-sm text-gray-400">
                <span className="font-semibold text-white">Technologies:</span>{' '}
                {vuln.tech.join(', ')}
              </p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default OWASPVulnerabilityFeed;
